#!/bin/zsh

if [[ $# -lt 1 ]]; then
        echo "\nusage: ./create_app.sh [ -e example_to_run ] [ -k license_key_file ] [ -h protocol (http/https) ] [ -p port_num ] { blinkid_version }"
        echo "\navailable examples:\tblinkid-camera\n\t\t\tblinkid-file\n\t\t\tidbarcode\n\t\t\tmulti-side-file\n\t\t\tmulti-side"
        exit 1
fi

example="blinkid-camera"
portnum="8372"
protocol="http"
bid_ver="latest"

while getopts e:p:h: flag
do
        case "${flag}" in
                e) example=${OPTARG};;
                p) portnum=${OPTARG};;
                h) protocol=${OPTARG};;
                k) keyfile=${OPTARG};;
        esac
done

bid_ver=${@: -1}

if [ ${bid_ver:0:1} != 'v' ]; then
        bid_ver="latest"
fi

echo "Setting up environment for BlinkID $bid_ver $example example on port $portnum...\n"

rm -rf demoapp
mkdir demoapp

if [ "$protocol" = "https" ]; then
        echo "Getting local IP..."
        localips=$(ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p')
        NL='
'
        localip=${localips%%"$NL"*}
        echo "Local IP is: $localip\n"

        echo "Creating certificate..."
        cd demoapp
        mkdir cert && cd cert
        mkcert $localip
        mv *key* ip_key.pem
        mv $localip* ip.pem
        cd ../..
        echo "Certificate created!\n"
else
        localip="localhost"
fi

echo "Cloning BlinkID In-browser SDK $bid_ver"
if [ "$bid_ver" = "latest" ]; then
        git clone --depth 1 git@github.com:blinkid/blinkid-in-browser /tmp/create_env_bid_repo_$bid_ver
else
        git clone --depth 1 --branch $bid_ver git@github.com:blinkid/blinkid-in-browser /tmp/create_env_bid_repo_$bid_ver
fi
echo "Repo cloned!\n"

echo "Setting up demo app..."
cp -rf /tmp/create_env_bid_repo_$bid_ver/examples/$example/javascript/* demoapp
cp -rf /tmp/create_env_bid_repo_$bid_ver/resources demoapp

if [ "$protocol" = "https" ]; then
        awk -v d="\"https://$localip\:$portnum/resources\";" '$1=="loadSettings.engineLocation"{$3=d} 1' demoapp/app.js > demoapp/tmpapp.js
        mv demoapp/tmpapp.js demoapp/app.js
else
        awk -v d="\"http://$localip\:$portnum/resources\";" '$1=="loadSettings.engineLocation"{$3=d} 1' demoapp/app.js > demoapp/tmpapp.js
        mv demoapp/tmpapp.js demoapp/app.js
fi

awk '!/loadSettings.workerLocation/' demoapp/app.js > demoapp/tmpapp.js
mv demoapp/tmpapp.js demoapp/app.js

echo "Enter license key: "
read licensekey < "${keyfile:-/dev/stdin}"

awk -v d="\"$licensekey\"" '$2=="licenseKey"{$4=d} 1' demoapp/app.js > demoapp/tmpapp.js
mv demoapp/tmpapp.js demoapp/app.js

echo "Demo app set up!\n"

echo "Removing temporary files...\n"
rm -rf /tmp/create_env_bid_repo_$bid_ver

echo "Creating server..."

if [ "$protocol" = "https" ]; then
        echo "#!/usr/bin/python3" > demoapp/bpm_serve
        echo "ip = \"$localip\"" >> demoapp/bpm_serve
        echo "port = $portnum" >> demoapp/bpm_serve
        echo "print( \"Access app at https://$localip:$portnum\" )" >> demoapp/bpm_serve
        cat server_template.py >> demoapp/bpm_serve
else
        echo "#!/bin/bash" > demoapp/bpm_serve
        echo "echo \"Access app at http://localhost:$portnum\"\n" >> demoapp/bpm_serve
        echo "python3 -m http.server $portnum" >> demoapp/bpm_serve
fi

echo "Launching server...\n"
cd demoapp && chmod +x bpm_serve && ./bpm_serve
