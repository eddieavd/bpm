#!/bin/zsh

if [[ $# -lt 1 ]]; then
        echo "\nusage: ./create_app [ -s sdk ] [ -e example_to_run ] [ -k license_key_file ] [ -h protocol (http/https) ] [ -p port_num ] { sdk_version }"
        echo "\navailable sdks:\tblinkid\n\t\tblinkcard"
        echo "\navailable examples blinkid v5 :\tblinkid-camera\n\t\t\t\tblinkid-file\n\t\t\t\tidbarcode\n\t\t\t\tmulti-side-file\n\t\t\t\tmulti-side"
        echo "\navailable examples blinkid v6 :\tblinkid-camera\n\t\t\t\tblinkid-file\n\t\t\t\tidbarcode\n\t\t\t\tcombined-file\n\t\t\t\tcombined"
        echo "\navailable examples blinkcard  :\tblinkcard-camera\n\t\t\t\tblinkcard-file"
        exit 1
fi

ssl_server_template="import sys
import ssl
from http.server import HTTPServer, SimpleHTTPRequestHandler

httpd = HTTPServer( ( ip, port ), SimpleHTTPRequestHandler )

httpd.socket = ssl.wrap_socket(
                httpd.socket,
                keyfile     = \"cert/ip_key.pem\",
                certfile    = \"cert/ip.pem\",
                server_side = True
)

httpd.serve_forever()"

sdk="blinkid"
example="blinkid-camera"
portnum="8372"
protocol="http"
sdk_ver="latest"

while getopts s:e:p:h:k: flag
do
        case "${flag}" in
                s) sdk=${OPTARG};;
                e) example=${OPTARG};;
                p) portnum=${OPTARG};;
                h) protocol=${OPTARG};;
                k) keyfile=${OPTARG};;
        esac
done

repo_path="/tmp/create_env_bpm_repo_"
repo_path+="${sdk}"
repo_path+="${sdk_ver}"

sdk_ver=${@: -1}

if [ ${sdk_ver:0:1} != 'v' ]; then
        sdk_ver="latest"
fi

echo "Setting up environment for $sdk $sdk_ver $example example app on port $portnum...\n"

rm -rf demoapp
mkdir demoapp

if [ "$protocol" = "https" ]; then
        echo "Getting local IP..."
        localips=$(ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p')
        NL='
'
        localip=${localips%%"$NL"*}
        echo "Local IP is: $localip\n"

        echo "Creating certificate..."
        cd demoapp
        mkdir cert && cd cert
        mkcert $localip
        mv *key* ip_key.pem
        mv $localip* ip.pem
        cd ../..
        echo "Certificate created!\n"
else
        localip="localhost"
fi

echo "Cloning $sdk in-browser sdk $sdk_ver ..."

if [ -d "${repo_path}" ]; then
        echo "Found cached version!\n"
else
        echo "Cloning via SSH..."
        if [ "$sdk_ver" = "latest" ]; then
                git clone --depth 1 git@github.com:$sdk/$sdk-in-browser $repo_path
        else
                git clone --depth 1 --branch $sdk_ver git@github.com:$sdk/$sdk-in-browser $repo_path
        fi
        if ! [[ -d "${repo_path}" ]]; then
                echo "Retrying via HTTPS..."
                if [ "$sdk_ver" = "latest" ]; then
                        git clone --depth 1 https://github.com/$sdk/$sdk-in-browser $repo_path
                else
                        git clone --depth 1 --branch $sdk_ver https://github.com/$sdk/$sdk-in-browser $repo_path
                fi
        fi
        echo "Repo cloned!\n"
fi

echo "Setting up demo app..."
cp -rf $repo_path/examples/$example/javascript/* demoapp
cp -rf $repo_path/resources demoapp

awk -v d="window.location.origin + \"/resources\"" '$1=="loadSettings.engineLocation"{$3=d} 1' demoapp/app.js > demoapp/tmpapp.js

awk '!/loadSettings.workerLocation/' demoapp/tmpapp.js > demoapp/app.js
rm demoapp/tmpapp.js

echo "License key: "
read licensekey < "${keyfile:-/dev/stdin}"

if [ -z "$licensekey" ]; then
        echo "Using default license key."
else
        awk -v d="\"$licensekey\"" '$2=="licenseKey"{$4=d} 1' demoapp/app.js > demoapp/tmpapp.js
        mv demoapp/tmpapp.js demoapp/app.js
fi

echo "Demo app set up!\n"

echo "Creating server..."

if [ "$protocol" = "https" ]; then
        echo "#!/usr/bin/python3" > demoapp/bpm_serve
        echo "ip = \"$localip\"" >> demoapp/bpm_serve
        echo "port = $portnum" >> demoapp/bpm_serve
        echo "print( \"Access app at https://$localip:$portnum\" )" >> demoapp/bpm_serve
        echo "$ssl_server_template" >> demoapp/bpm_serve
else
        echo "#!/bin/bash" > demoapp/bpm_serve
        echo "echo \"Access app at http://localhost:$portnum\"\n" >> demoapp/bpm_serve
        echo "python3 -m http.server $portnum" >> demoapp/bpm_serve
fi

echo "Launching server...\n"
cd demoapp && chmod +x bpm_serve && ./bpm_serve
